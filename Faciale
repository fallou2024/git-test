import cv2
import numpy as np
import streamlit as st
from PIL import Image

st.title("Détection de Visage avec YOLO")

# Instructions
st.write("""
## Instructions
- Téléchargez une image
- Ajustez les paramètres
- Cliquez sur 'Détecter les visages'
- Enregistrez l'image correspondant
""")

# Téléchargement de l'image
uploaded_file = st.file_uploader("Choisissez une image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption='Image Téléchargée.', use_column_width=True)
    image_np = np.array(image)
    
    # Choisir la couleur des rectangles
    color = st.color_picker('Choisissez la couleur des rectangles', '#00f900')
    color_bgr = tuple(int(color[i:i+2], 16) for i in (1, 3, 5))[::-1]
    
    # Ajuster les paramètres
    min_neighbors = st.slider('Ajustez le paramètre minNeighbors', 1, 10, 5)
    scale_factor = st.slider('Ajustez le paramètre scaleFactor', 1.0, 2.0, 1.1)
    
    if st.button('Détecter les visages'):
        # Charger YOLO
        import cv2
        import numpy as np
        import streamlit as st
        from PIL import Image
        net = cv2.dnn.readNet("model_yolo/yolov3.weights", "darknet/cfg/yolov3.cfg")
        layer_names = net.getLayerNames()
        output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]
        
        # Détection
        blob = cv2.dnn.blobFromImage(image_np, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        outs = net.forward(output_layers)
        
        faces = []
        
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.5 and class_id == 0:  # assuming class_id 0 is for face
                    center_x = int(detection[0] * image_np.shape[1])
                    center_y = int(detection[1] * image_np.shape[0])
                    w = int(detection[2] * image_np.shape[1])
                    h = int(detection[3] * image_np.shape[0])
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)
                    faces.append((x, y, w, h))
                    cv2.rectangle(image_np, (x, y), (x+w, y+h), color_bgr, 2)
        
        st.image(image_np, caption='Image avec visages détectés.', use_column_width=True)
        
        if st.button('Enregistrer l\'image'):
            output_path = 'output.jpg'
            save_image(image_np, faces, output_path)
            st.write(f'Image enregistrée sous le nom {output_path}')

